[1,0,0,[["cc.TextAsset",["_name","text"],1]],[[0,0,1,3]],[[0,"api.d","\ntype SwihNodeCallback = (it: cc.Node) => any;\ntype SwihToggleCallback = (it: cc.Toggle) => any;\n\ntype Point = {\n    x: number;\n    y: number;\n}\n\nvar wx: any\nvar qq: any\nvar sdk: any\nvar tt: any\nvar wxPro: any// 微信接口Promise\nvar wxPc: any// 微信同玩同聊\nvar sdkbox: any// sdkbox app特有\nvar FBInstant: any //fb小游戏\n\ndeclare namespace sp {\n\n    interface Skeleton {\n        play(name: string): void;\n        playAsync(name: string): Promise<void>;\n    }\n}\n\ndeclare namespace cc {\n\n    interface Vec2 {\n        set2(x: number, y: number): Vec2;\n        equals2(x: number, y: number): boolean;\n        Join(separator?: string): string;\n        toVec3(): Vec3;\n        newVec3(): Vec3;\n        toJson(): Point;\n        FlipX(): Vec2;\n        toDB(): any;\n    }\n\n    interface Vec3 {\n        set2(x: number, y: number, z: number): Vec3;\n        equals2(x: number, y: number, z?: number): boolean;\n        Join(separator?: string): string;\n        toVec2(): Vec2;\n        newVec2(): Vec2;\n        toDB(): any;\n    }\n\n    interface _BaseNode {\n        Data: any;\n        _hitTest(vec: Vec2 | Vec3): boolean;\n        setActive(val: boolean): Node;\n        Child(name: string | number): Node;\n        Child(name: string | number, className: string): any;\n        Child<T extends Component>(name: string | number, type: { prototype: T }): T;\n        FindChild(name: string | number): Node;\n        FindChild(name: string | number, className: string): any;\n        FindChild<T extends Component>(name: string | number, type: { prototype: T }): T;\n        Component<T extends Component>(type: { prototype: T }): T;\n        Component(className: string): any;\n        Items<T>(list: T[] | number, item: Node | Prefab, setItemData: (it: cc.Node, data: T, i: number) => void, target?: any): void;\n        Items<T>(list: T[] | number, setItemData: (it: cc.Node, data: T, i: number) => void, target?: any): void;\n        Items<T>(list: T[] | number): void;\n        AddItem(item: Node | Prefab, setItemData: (it: cc.Node, i: number) => void, target?: any): void;\n        AddItem(setItemData: (it: cc.Node, i: number) => void, target?: any): void;\n        Swih(val: string | number | SwihNodeCallback, reverse?: boolean): Node[];\n        SetColor(val: string | Color): Node;\n        /** 穿透事件 true:禁止；false:允许 */\n        SetSwallowTouches(val: boolean): void;\n        IsSwallowTouches(): boolean;\n        setLocaleKey(key: string, ...params: any[]);\n        getWorldBox()\n        cleanAllChildren(isDestroy?: boolean): void;\n    }\n\n    interface Component {\n        getActive(): boolean;\n        setActive(val: boolean): void;\n        getPosition(out?: cc.Vec2): cc.Vec2;\n        Child(name: string | number): Node;\n        Child(name: string | number, className: string): any;\n        Child<T extends Component>(name: string | number, type: { prototype: T }): T;\n        FindChild(name: string | number): Node;\n        FindChild(name: string | number, className: string): any;\n        FindChild<T extends Component>(name: string | number, type: { prototype: T }): T;\n        Component<T extends Component>(type: { prototype: T }): T;\n        Component(className: string): any;\n        SetColor(val: string | Color): Component;\n        GetColor(): Color;\n    }\n\n    interface Animation {\n        playAsync(name?: string): Promise<void>;\n        playToFinished(callback: Function, name?: string): AnimationState;\n        setCompleteListener(callback: Function): void;\n    }\n\n    interface Label {\n        _forceUpdateRenderData(): void;// v2.2.0\n        SetColor(val: string | Color): Label;\n        setLocaleKey(key: string, ...params: any[]);\n    }\n\n    interface RichText {\n        setLocaleKey(key: string, ...params: any[]);\n    }\n\n    interface Sprite {\n        setLocaleKey(key: string);\n    }\n\n    interface ScrollView {\n        Items<T>(list: T[] | number, setItemData?: (it: cc.Node, data: T, i: number) => void, target?: any): void;\n        AddItem(setItemData: (it: cc.Node, i: number) => void, target?: any): void;\n        Find(predicate: (value: Node, index: number, obj: Node[]) => unknown, thisArg?: any): Node;\n        IsEmpty(): boolean;\n        List(len: number, setItemData?: (it: cc.Node, i: number) => void, target?: any): void;\n        GetItemNode(): Node;\n    }\n\n    interface ToggleContainer {\n        Swih(val: string | number | SwihToggleCallback): Toggle[];\n        Tabs(val: string | number | SwihToggleCallback): Toggle;\n    }\n\n    // 按钮扩展\n    export class ButtonEx extends Component {\n        interactable: boolean;\n        static DefaultClickPath: string;\n    }\n\n    // 按钮扩展\n    export class ButtonLongPress extends Component {\n        init(cb: Function): void;\n    }\n\n    // scrollview扩展\n    export class ScrollViewEx extends Component {\n        list(len: number, cb?: Function, target?: any): void;\n        redraw(): void;\n    }\n\n    // 播放等待的点\n    export class LabelWaitDot extends Component {\n        play(val?: string): void;\n        stop(val?: string): void;\n    }\n\n    // 滚动数字\n    export class LabelRollNumber extends Component {\n        setPrefix(val: string): LabelRollNumber;\n        set(val: number): LabelRollNumber;\n        to(end: number, duration?: number): void;\n        by(val: number, duration?: number): void;\n    }\n\n    // 时间文本\n    export class LabelTimer extends Component {\n        string: string;\n        setPrefix(val: string): LabelTimer;\n        setFormat(val: string | ((time: number) => string)): LabelTimer;\n        setEndTime(val: number): LabelTimer;\n        setPause(val: boolean): void;\n        run(time: number, callback?: Function): void;\n        getTime(): number;\n        setTime(time: number): void;\n    }\n\n    // 多选颜色\n    export class MultiColor extends Component {\n        setColor(idx: number | boolean): void;\n    }\n\n    // 多选精灵\n    export class MultiFrame extends Component {\n        addFrame(sf: cc.SpriteFrame): void;\n        setFrame(idx: number | boolean | string): void;\n        getFrame(idx: number | boolean | string): SpriteFrame;\n        getIndex(): number;\n        frameCount(): number;\n        getSpriteFrame(): SpriteFrame;\n        random(): number;\n        clean(): void;\n    }\n\n    export class MultiFrameParticle extends Component {\n        addFrame(sf: cc.SpriteFrame): void;\n        setFrame(idx: number | boolean | string): void;\n        getFrame(idx: number | boolean | string): SpriteFrame;\n        getIndex(): number;\n        frameCount(): number;\n        getSpriteFrame(): SpriteFrame;\n        random(): number;\n        clean(): void;\n    }\n\n    // 多语言label\n    export class LangLabel extends Component {\n        string: string;\n        setLangKey(key: string, ...params: any[]);\n        updateString();\n    }\n\n    // 多语言label\n    export class LocaleLabel extends Component {\n        string: string;\n        setLangKey(key: string, ...params: any[]);\n        updateLang();\n        updateString();\n    }\n\n    // 多语言RichText\n    export class LocaleRichText extends Component {\n        setLangKey(key: string, ...params: any[]);\n    }\n\n    // 多语言Sprite\n    export class LocaleSprite extends Component {\n        setLangKey(key: string);\n        addSpriteFrame(val: cc.SpriteFrame);\n    }\n\n    // 自适应大小\n    export class LabelAutoAdaptSize extends Component {\n        setSize(val: cc.Vec2): void;\n        setMinScaleWidth(val: number): void;\n    }\n\n    function instantiate2(item: Node | Prefab, parent: Node | Component): Node;\n}\n\ntype ProcessCallback = (completedCount: number, totalCount: number, item?: any) => void;\n\ntype EventItem = {\n    callback: Function;\n    target: any;\n}\n\ntype AudioAsset = {\n    mod: string;// 模块名\n    url: string;\n    audio: cc.AudioClip;\n}\n\ntype PnlParam = {\n    isClean?: boolean;\n    isAct?: boolean;\n    isMask?: boolean;\n    Index?: number;\n    adaptHeight?: number;\n    adIndex?: number;\n    isHideClean?: boolean;\n}\n\ntype WindParam = {\n    isClean?: boolean;\n    isAutoReleaseSprite?: boolean;\n}\n\n// 加载pnl信息\ntype LoadPnlInfo = {\n    id: number;\n    name: string; //传入名\n    url: string; //实际pnl路径\n    params?: any[]; //参数\n}\n\nclass BaseViewCmpt extends cc.Component {\n    readonly _state: string;\n    addEvent(type: string, cb: Function, target?: any);\n    removeEvent(type: string);\n    emit(type: string | number, ...params: any);\n    addClickEvent(cmpt: cc.Component, handler: string, data?: string);\n    eventMaps(): { enter?: boolean }[];\n    getModel<T>(key: string): T;\n    disposeAllSprites(): void;\n    resotreAllSprites(): void;\n}\n\ndeclare namespace mc {\n\n    export const GameNameSpace: string;\n    export var currWind: BaseWindCtrl;\n    export var currWindName: string;\n    export var currScene: string;// 当前场景 start - loading - main\n    export var lang: string;// 当前语言\n    export function init(name: string, root: cc.Node, lang?: string, changeLang?: boolean, topTouchCmpt?: typeof cc.Component): void;\n    export function lockTouch(val: boolean);\n    export function isLockTouch(): boolean;\n    export function addmodel(type: string);\n    export function getWindNode(): cc.Node;\n    export function getViewNode(): cc.Node;\n    export function getNoticeNode(): cc.Node;\n    export function getOpenPnls(): BasePnlCmpt[];\n\n    export enum Event {\n        MVC_ERROR_MSG,\n        LANGUAGE_CHANGED,\n        /** (key: string | BasePnlCtrl, ...params: any) */\n        OPEN_PNL,\n        /** (key: string | BasePnlCtrl) */\n        HIDE_PNL,\n        /** (val?: string, ignores: string) */\n        HIDE_ALL_PNL,\n        /** (key: string | BasePnlCtrl) */\n        CLOSE_PNL,\n        /** (val?: string) */\n        CLOSE_ALL_PNL,\n        /** (mod: string) */\n        CLOSE_MOD_PNL,\n        /** (key: string, complete?: Function, progress?: (done: number, total: number) => void) */\n        PRELOAD_PNL,\n        LOAD_BEGIN_PNL,\n        LOAD_END_PNL,\n        PNL_ENTER,\n        PNL_LEAVE,\n        CLEAN_ALL_UNUSED,\n        /** (id: number) */\n        GIVEUP_LOAD_PNL,\n        SET_PNL_OPTS,\n        /** (key: string, ...params: any) */\n        GOTO_WIND,\n        /** (key: string, complete?: Function, progress?: (done: number, total: number) => void) */\n        PRELOAD_WIND,\n        WIND_ENTER,\n        CLEAN_CACHE_WIND,\n        LOAD_BEGIN_WIND,\n        LOAD_END_WIND,\n        /** (complete?: Function, progress?: (done: number, total: number) => void) */\n        LOAD_ALL_NOTICE,\n        LOAD_BEGIN_SPRITE,\n        LOAD_END_SPRITE,\n        /** 热更新事件 */\n        HOT_UPDATE_EVENT,\n        HOT_UPDATE_END,\n    }\n\n    export class BasePnlCmpt extends BaseViewCmpt {\n        readonly key: string; //传入名\n        readonly moudleName: string; //所属模块名\n        readonly url: string; //路径\n        readonly Index: number; //层级\n        readonly isClean: boolean; //是否清理\n        mask: cc.Node;\n        async onCreate(): Promise<void>;\n        onEnter(...params: any);\n        onRemove();\n        onDispose();\n        onRootScaleChange();\n        hide();\n        close();\n        setOpacity(val: number); //设置UI的透明度\n        setParam(opts: PnlParam);\n    }\n\n    export class BaseWindCtrl extends BaseViewCmpt {\n        readonly key: string; //传入名 即模块名\n        async onCreate(): Promise<void>;\n        async onReady(): Promise<void>;\n        onEnter(...params: any);\n        onLeave();\n        onClean();\n        setParam(opts: WindParam);\n        onBack();\n    }\n\n    export class BaseNoticeCtrl extends BaseViewCmpt {\n        async onCreate(): Promise<void>;\n        onClean();\n        open();\n        hide();\n    }\n\n    export class BaseWdtCtrl extends BaseViewCmpt {\n        onCreate();\n        onClean();\n    }\n\n    export class BaseLogCtrl extends cc.Component {\n        onCreate();\n        onClean();\n        onLoggerListener(type: string, content: string);\n        close();\n    }\n\n    export class BaseModel {\n        readonly type: string;\n        constructor(type: string);\n        protected onCreate();\n        protected onClean();\n        protected emit(type: string | number, ...params: any);\n        protected getModel<T>(key: string): T;\n    }\n\n    export class modelMgr {\n        static add(...params: BaseModel[]): void;\n        static get<T>(key: string): T;\n        static reset(model: BaseModel): void;\n    }\n}\n\nvar eventMgr: {\n    emit(type: number | string, ...params: any): void;\n    get(type: number | string, ...params: any): any;\n    async req(type: number | string, ...params: any): any;\n    on(type: number | string, callback: Function, target?: any): void;\n    once(type: number | string, callback: Function, target?: any): void;\n    async wait(type: number | string): Promise<any>;\n    off(type: number | string, callback?: Function, target?: any): void;\n    dispose();\n}\n\nvar storageMgr: {\n    register(key: string, callback: Function, target: any): void;\n    loadString(key: string): string;\n    saveString(key: string, val: string): void;\n    loadNumber(key: string): number;\n    saveNumber(key: string, val: number): void;\n    loadBool(key: string): boolean;\n    saveBool(key: string, val: boolean): void;\n    loadJson(key: string): any;\n    saveJson(key: string, val: any): void;\n    loadBigJson(key: string): any;\n    saveBigJson(key: string, val: any): void;\n    save(): void;\n    clear(): void;\n    reset(): void;\n    getStorageInfo();\n    setStorageInfo(info: any, ver: number);\n    syncSaveLazy(): void\n    public loadObject(key: string): any\n    public saveObject(key: string, val: object)\n    getOrgItem(key: string)\n    setOrgItem(key, data: string)\n    getCheckInfoFromRecord(record?)\n    changeNumber(key: string, val: number)\n    getVersion(key: string)\n    b64Encode(str: string): string\n    b64Decode(str: string): string\n}\n\nvar hotUpdateMgr: {\n    start(packageUrl: string, manifestUrl: string, version: string);\n    abort();\n    redownload();\n    getVersion(): string;\n    versionCompareHandle2(versionA: string, versionB: string): number;\n    cleanCache();\n    convertBytesToString(bytes: number): string;\n    isUpdating(): boolean;\n    checkReport()\n    updateCostTime(dt: number)\n}\n\nvar jsbHelper: {\n    public cast(event: string, callback?: Function, jsonObj?: any, target?: any): any\n    public async call(event: string, jsonObj?: any): Promise<any>\n    public on(event: string, callback?: Function, target?: any)\n    public off(event: string, callback?: Function, target?: any)\n    public async getPackageSign(): string\n    public getDeviceType(): string\n    public initIAP()\n    public getIAPCfg(): any\n}\n\ndeclare namespace ut {\n\n    export var Time: {\n        readonly Day: number;\n        readonly Hour: number;\n        readonly Minute: number;\n        readonly Second: number;\n    }\n\n    export var MAX_VALUE: number;\n    export var MIN_VALUE: number;\n\n    export function now(): number;\n\n    export function millisecondToString(msd: number): string;\n\n    export function timediff(start: number, date: string): number;\n    export function timediff2(start: number, date: string): number;\n\n    /**\n     * 将一个毫秒数格式化 format('hh:mm:ss')\n     * @param msd \n     * @param format 默认'mm:ss'\n     */\n    export function millisecondFormat(msd: number, format?: string): string;\n\n    /**\n     * 将一个秒格式化\n     * @param val \n     * @param format 默认'mm:ss'\n     */\n    export function secondFormat(val: number, format?: string): string;\n\n    /**\n     * 将一个时间 format('yyyy-MM-dd hh:mm:ss')\n     * @param format\n     * @param msd\n     */\n    export function dateFormat(format: string, msd?: number): string;\n\n    /**\n     * 秒转化为天时分秒\n     * @param mss\n     */\n    export function formatDuring(mss: number): { days, hours, minutes, seconds };\n\n    /**\n     * 首字母变成大写\n     * @param str \n     */\n    export function initialUpperCase(str: string): string;\n\n    /**\n     * 将数字转换为String 中文\n     * @param money \n     * @param num \n     */\n    export function simplifyMoneyCh(money: number, num?: number): string;\n\n    /**\n     * 将数字转换为String 英文\n     * @param money \n     * @param num \n     */\n    export function simplifyMoneyEn(money: number, num?: number): string;\n\n    export function simplifyMoney(money: number, num?: number, fixed?: number): string;\n\n    /**\n     * 名字省略\n     * @param name \n     * @param max \n     * @param extra \n     */\n    export function nameFormator(name: string, max: number, extra?: string): string;\n\n    /**\n     * 将数字以逗号隔开\n     * @param num \n     */\n    export function formatNumberByComma(num: number): string;\n\n    /**\n     * 随机一个整数 包括min和max\n     * @param min [最小值]\n     * @param max [最大值]\n     */\n    export function random(min: number, max?: number): number;\n\n    /**\n     * 是否有概率\n     * @param odds 概率值必须是100内的数字\n     * @param mul 概率值倍数\n     */\n    export function chance(odds: number, mul: number = 1): boolean\n\n    /**\n     * 随机一个负数到正数的范围\n     */\n    export function randomRange(min: number, max: number): number;\n\n    /**\n     * 随机一个下标出来\n     * @param len    [数组长度]\n     * @param count  [需要随机的个数](可不填)\n     * @param ignore [需要忽略的下标](可不填)\n     */\n    export function randomIndex(len: number, count?: number, ignore?: any);\n\n    /**\n     * 根据权重随机\n     * @param arr 权重数组\n     */\n    export function randomIndexByWeight(arr: any[], key?: string | number): number;\n\n    export function randomArray(arr: any[]): any[];\n    /**\n     * 从一个数组中随机不重复的元素\n     * @param arr 原数组\n     * @param max 返回数组的最大长度\n     */\n    export function randomNoRepeat(arr: any[], max: number): any[];\n    /**\n     * 从一个数组中根据权重随机不重复的元素\n     * @param arr 原数组\n     * @param max 返回数组的最大长度\n     * @param key 权重\n     */\n    export function randomNoRepeatByWeight(arr: any[], max: number, key?: string | number): any[];\n    /**\n     * 新的获取角度\n     * 以a为圆点开始顺时针方向旋转到b点的角度\n     * @param a [圆点]\n     * @param b [目标点]\n     */\n    export function getAngle(a: cc.Vec2 | cc.Vec3, b: cc.Vec2 | cc.Vec3): number;\n    export function normAngle(angle: number): number;\n\n    /**\n     * Math.sin 返回Y坐标\n     * @param angle \n     */\n    export function sin(angle: number): number;\n\n    /**\n     * Math.cos 返回X坐标\n     * @param angle \n     */\n    export function cos(angle: number): number;\n\n    /**\n     * 根据角度和距离 获取坐标\n     * @param angle \n     * @param dis \n     * @param out \n     */\n    export function angleToPoint(angle: number, dis: number, out?: cc.Vec2): cc.Vec2;\n\n    /**\n    * 获取某个节点在某个节点里面的坐标\n    * @param node 需要转换的节点\n    * @param targetNode 要转换到的目标节点\n    */\n    export function convertToNodeAR(node: cc.Node, targetNode: cc.Node, out?: cc.Vec2): cc.Vec2;\n\n    /**\n    * 获取某个节点的某个坐标在某个节点里面的坐标\n    * @param node 需要转换的节点\n    * @param targetNode 要转换到的目标节点\n    * @param nodePoint 第一个节点的某个坐标，默认原点\n    * @param withCamera 是否需要相机转换（两个节点在不同摄像机下), 默认为true\n    */\n    export function convertToNodePosAR(node: cc.Node, targetNode: cc.Node, nodePoint?: cc.Vec2, out?: cc.Vec2, withCamera: boolean = true): cc.Vec2;\n\n    /**\n    * 数字 字符串补0,根据长度补出前面差的0\n    * @param num 需要补的数字\n    * @param length 要补的长度默认为2\n    */\n    export function pad(num: number, length: number = 2): string;\n\n    /**\n     * 将一个数字 分解成多个类型的数字\n     * @param num   [数字]\n     * @param types [你想分解的类型列表 可不填]\n     */\n    export function decomposeNumberToTypes(num: number, types: number[] = [100000, 10000, 1000, 100, 10, 1], out?): any;\n\n    /**\n     * 将一个字符串转换成向量\n     * @param str 一个字符串必须满足以逗号隔开\n     * @param separator 分隔符默认','\n     */\n    export function stringToVec2(str: string, separator?: string): cc.Vec2;\n\n    /**\n     * 将一个字符串拆分为数组\n     * @param str \n     * @param separator 默认|\n     */\n    export function stringToNumbers(str: string, separator?: string): number[];\n\n    /**\n     * 将一个常数变成1 并保留正负\n     * @param val \n     */\n    export function normalizeNumber(val: number): number;\n\n    /**\n     * 将一个数字转换为带正负符号的字符串\n     * @param val \n     */\n    export function numberToString(val: number): string;\n\n    /**\n     * 填充一个带参数的字符串\n     * @param text \n     * @param params \n     */\n    export function stringFormat(text: string, params: any[]): string;\n\n    /**\n     * 同步等待时间 (单位秒)\n     * @param delay \n     */\n    export function wait(delay: number, target?: cc.Component): Promise<void>;\n\n    /**\n     * 同步等待时间 (单位毫秒)，用setTimeout实现\n     * @param delay \n     */\n    export function waitTimeout(delay: number): Promise<void>;\n\n    /**\n     * 等待下一帧\n     * @param frames (需要等待的帧数,默认1)\n     */\n    export function waitNextFrame(frames?: number, target?: cc.Component): Promise<void>;\n\n    /**\n     * 读取 16 进制颜色\n     * color.fromHEX(\"#FFFF33\");\n     * @param hexString \n     */\n    export function colorFromHEX(hexString: string): cc.Color;\n\n    /**\n     * 生成一个唯一ID\n     */\n    export function uid(): string;\n\n    /**\n     * 是否对象\n     * @param o \n     */\n    export function isObject(o: any): boolean;\n\n    /**\n     * 判断是否空对象\n     * @param o \n     */\n    export function isEmptyObject(o: any);\n\n    /**\n     * 拷贝对象\n     * @param obj \n     */\n    export function cloneObject(obj: any): any;\n\n    /**\n     * 深度拷贝对象\n     * @param obj \n     */\n    export function deepClone(obj: any, inDeep?: boolean): any;\n\n    /**\n     * 深度比较两个对象是否相等\n     * @param x \n     * @param y \n     */\n    export function compareObject(x: any, y: any): boolean;\n\n    /**\n     * 组装列表\n     * @param arr \n     * @param datas \n     * @param item \n     * @param parent \n     * @param cb \n     */\n    export function items(arr: cc.Node[], datas: any[], item: cc.Node | cc.Prefab, parent: cc.Node, cb: Function): void;\n\n    /**\n     * 循环值\n     * @param val \n     * @param len [数组长度] \n     */\n    export function loopValue(val: number, len: number);\n\n    /**\n     * 设置屏幕常亮\n     * @param val \n     */\n    export function setKeepScreenOn(val: boolean);\n\n    /**\n     * 将一个bool值转成1和0\n     * @param val \n     */\n    export function boolToNumber(val: boolean): number;\n\n    /**\n     * http请求\n     * @param method \n     * @param url \n     * @param data \n     * @param cb \n     */\n    export function httpRequest(method: string, url: string, data?: any): Promise<any>;\n\n    /**\n     * 是否手机平台\n     */\n    export function isMobile(): boolean;\n\n    /**\n     * 判断是否是小程序\n     */\n    export function isWechatOrQQ(): boolean\n\n    /**\n     * 判断是否微信小程序\n     */\n    export function isWechatGame(): boolean\n\n    export function isTikTok(): boolean\n\n    export function isQQ(): boolean\n\n    /**\n     * 是否ios\n     */\n    export function isIos(): boolean;\n\n    /**\n     * 判断是安卓\n     */\n    export function isAndroid(): boolean\n\n    /**\n     * 获取随机字符串\n     */\n    export function getRandomString(len: number): string\n\n    /**\n     * 版本比较\n     * @return v2 > v1 = true，反之则为false\n     */\n    export function compareVersion(v1: string, v2: string): boolean\n\n    /**\n     * 创建一个数组\n     * @param count \n     * @param val \n     */\n    export function newArray(count: number, val?: any): any[];\n\n    /**\n     * Array.map的异步版本\n     */\n    export function promiseMap<T, R>(arr: T[], callback?: (T) => Promise<R>): Promise<R[]>;\n\n    /**\n     * 对方法进行加锁的修饰器\n     * 加锁的方法必须以promise作为返回值，可以接收一个锁名作为参数\n     * @example addLock  addLock(\"isWork\")\n     */\n    export function addLock(target?: Object | string, propertyName?: string, propertyDescriptor?: PropertyDescriptor): PropertyDescriptor\n\n    export function dataProp(ctorProtoOrOptions?, propName?): any\n\n    /**\n     * 处理一个异步方法被多次调用的情况，只处理最后一次调用\n     * 使用场景如 上报蜡烛，只需要上报最新的就好了\n     */\n    export function queueLast(target?: Object | string, propertyName?: string, propertyDescriptor?: PropertyDescriptor): PropertyDescriptor\n\n    /**\n     * 处理一个异步方法被多次调用的情况，会按照调用顺序依次进行调用 (处理完第一个调用的结果再处理第二次调用)\n     * 使用场景如 日志上报，需要上报每一条日志\n     */\n    export function queueEvery(target?: Object | string, propertyName?: string, propertyDescriptor?: PropertyDescriptor): PropertyDescriptor\n\n    export function callOnce(target?: Object | string, propertyName?: string, propertyDescriptor?: PropertyDescriptor): PropertyDescriptor\n\n    /**\n     * 数字取整\n     * < 1000 按10取整\n     * < 100000 按100取整\n     * >= 100000 按1000取整\n     * @param val \n     */\n    export function toFloor(val: number): number\n\n    export function joinPath(path1: string, path2: string)\n\n    /**是否是fb小游戏 */\n    export function isFBInstant(): boolean\n\n    export function indexToXY(index: number): { x: number, y: number }\n\n    export function xyToIndex(x: number, y: number): number\n\n    export function clamp(val: number, min: number, max: number): number\n}\n\n// 配置表结构\ntype JsonConfData = {\n    datas: any[]\n    length: number\n    // dataIdMap: any\n    getById(id: string | number): any\n    get(key: string, value: any): any[]\n}\n\n// 临时资源结构\ntype TempAssetData = {\n    name: string\n    asset: cc.Asset\n    url: string\n    type: typeof cc.Asset\n    tagCount: number\n    refs: {} //引用列表\n}\n\n// 资源管理\nvar assetsMgr: {\n\n    debug: boolean;\n\n    // 初始化\n    async init(onProgess?: (percent: number) => void): Promise<void>;\n\n    /**\n     * 获取配置表数据\n     * @param name \n     */\n    getJson(name: string): JsonConfData;\n\n    /**\n     * 获取配置表数据2\n     * @param name \n     * @param id \n     */\n    getJsonData(name: string, id: string | number): any;\n\n    /**\n     * 获取全局图片\n     * @param name \n     */\n    getImage(name: string): cc.SpriteFrame;\n\n    /**\n     * 获取全局预制体\n     * @param name \n     */\n    getPrefab(name: string): cc.Prefab;\n\n    /**\n     * 获取声音\n     * @param name \n     */\n    getAudio(name: string): cc.AudioClip;\n\n    /**\n     * 获取材质\n     * @param name\n     */\n    getMaterial(name: string): cc.Material;\n\n    /**\n     * 获取字体\n     * @param name \n     */\n    getFont(name: string): cc.Font;\n\n    /**\n     * 动态字体\n     * @param url \n     */\n    getFontDynamic(url: string): Promise<cc.Font>;\n\n    /**\n     * 释放字体\n     * @param url 路径\n     * @param lang 语言\n     */\n    releaseFont(url: string, lang: string): void;\n\n    /**\n     * 位图字体开关\n     */\n    enabledBMFont(): boolean;\n\n    /**\n     * 转换文本\n     * @param key \n     * @param params \n     */\n    lang(key: string, ...params: any[]): string;\n\n    /**\n     * 加载临时资源 (需要手动释放)\n     * 会先从内存中寻找 如果有就会直接获取 没有将加载进来放入内存 缓存\n     * @param name \n     * @param type \n     * @param tag \n     */\n    async loadTempRes(name: string, type: typeof cc.Asset, tag?: string, progress?: Function): Promise<any>;\n    async loadTempRseDir(key: string, type: typeof cc.Asset, tag?: string): Promise<any[]>;\n\n    /**\n     * 加载远程图片 (需要手动释放)\n     * @param url\n     * @param ext 图片后缀 （.png .jpg）\n     * @param tag\n     */\n    async loadRemote(url: string, ext: string, tag?: string): Promise<cc.SpriteFrame>;\n\n    /**\n     * 释放临时资源\n     * @param name \n     * @param tag \n     */\n    releaseTempRes(name: string, tag?: string);\n    releaseTempAsset(name: string);\n\n    /**\n     * 释放所有标记的临时资源\n     * @param tag \n     */\n    releaseTempResByTag(tag: string);\n\n    /**\n     * 根据path，uuid等找资源url, 更详细的参数参考源码urlTransformer\n     * @param params eg: {path: \"manifest/project\", bundle: \"resources\"}\n     * @param option eg: {ext: .manifest}\n     */\n    transform(params: { path: string, bundle: string } | string, option: { ext?: string, __isNative__?: boolean } | any = {}): string\n\n    /**\n     * 加载一次性资源 不缓存\n     * 注意：需要和releaseOnceRes成对使用\n     * @param url \n     * @param type \n     */\n    async loadOnceRes(url: string, type: typeof cc.Asset): Promise<any>;\n\n    releaseOnceRes(url: string, type: typeof cc.Asset);\n\n    // 是否低内存\n    isLowMemory(lv?: number): boolean;\n\n    onMemoryWarning(): void;\n\n    async loadJsonByName(name: string, enc: boolean = true, cache: boolean = true): Promise<JsonConfData>;\n    async loadLanJson(name: string): Promise<JsonConfData>;\n    async delayInit(): Promise<void>;\n    async loadMaterial(onProgess?: Function): Promise<void>;\n    async loadAudio(onProgess?: Function): Promise<void>;\n    async loadImages(onProgess?: Function): Promise<void>;\n    async loadFontByPath(path: string): Promise<cc.Font>;\n    async loadFontByName(name: string): Promise<cc.Font>;\n    async loadPrefabByPath(path: string): Promise<cc.Prefab>;\n    setTempPrefab(name: string, prefab: cc.Prefab): void;\n    async preloadInGuide(): Promise<void>;\n    setPreloadConcurrency(maxConcurrency, maxRequestsPerFrame): void;\n    setDownloadConcurrency(maxConcurrency, maxRequestsPerFrame): void;\n    preloadInOpening(): void;\n    getInitJsonStep_1(): string[];\n    public setPreloadConcurrency(maxConcurrency, maxRequestsPerFrame);\n    public setDownloadConcurrency(maxConcurrency, maxRequestsPerFrame);\n    isInit(): boolean;\n    markInit(): void;\n    async loadStartJsons(onProgess: Function): Promise<void>;\n\n    changeLangJson(lang: string): void;\n};\n\n// 声音\nvar audioMgr: {\n\n    bgmVolume: number;\n    sfxVolume: number;\n\n    // 初始化\n    init(): void;\n    // 暂停所有声音\n    pauseAll(): void;\n    // 恢复所有声音\n    resumeAll(): void;\n    //\n    stopAll(): void;\n    clean(): void;\n\n    /**\n     * 加载声音\n     * @param urls \n     */\n    async load(urls: string | string[]): Promise<void>;\n\n    /**\n     * 预加载\n     * @param url \n     */\n    async preload(url: string): Promise<void>;\n\n    /**\n     * 加载声音 根据模块来\n     * @param mod\n     */\n    async loadByMod(mod?: string): Promise<void>;\n\n    /**\n     * 释放单个声音\n     * @param val \n     */\n    release(val: string): void;\n\n    /**\n     * 释放对应mod的声音\n     * @param mod \n     */\n    releaseByMod(mod?: string): void;\n\n    /**\n     * 释放所有声音\n     */\n    releaseAll(): void;\n\n    /**\n     * 播放背景音乐\n     * @param url \n     */\n    playBGM(url: string, volume?: number): void;\n\n    /**\n     * 停止播放背景音乐\n     */\n    stopBGM(): void;\n\n    /**\n     * 播放音效\n     * @param url \n     * @param loop [是否循环]\n     * @param cb [播放完成后的回调]\n     */\n    async playSFX(url: string, opts?: { volume?: number, startTime?: number, loop?: boolean, onComplete?: Function, tag?: string }): Promise<number>;\n\n    /**\n     * 停止播放音效\n     * @param val \n     */\n    stopSFX(val: number | string | cc.AudioClip, tag: string = ''): void;\n\n    /**\n     * 设置临时的背景音乐声音\n     * @param val \n     */\n    setTempBgmVolume(val: number): void;\n\n}\n\n// 敏感词过滤\nvar sensitiveWord: {\n    /**\n     * 设置敏感词库\n     * @param val 敏感词库\n     */\n    setWords(val: string[]): void;\n\n    /**\n     * 过滤敏感词\n     * @param content 过滤内容\n     */\n    filter(content: string): string\n}\n\n// 原子锁\nvar atomicLock: {\n    getsetLock(key: string, expire?: number): { key: string, etime: number }\n    deleteLock(key: string): void\n}\n\n// 日志\nvar lplog: {\n    open: boolean;\n    /**\n     * 打印信息\n     * @param msg \n     * @param subst \n     */\n    info(msg: any | string, ...subst: any[]): void;\n\n    /**\n     * 打印错误日志\n     * @param msg \n     * @param subst \n     */\n    error(msg: any | string, ...subst: any[]): void;\n\n    upLog: {\n        info(...params: any);\n        warn(...params: any);\n        error(...params: any);\n        setFilterMsg(msg: any);\n        addFilterMsg(msg: any);\n    }\n}\n\n// 数组\ninterface Array<T> {\n\n    /**\n     * 删除数组一个元素并返回这个元素\n     * @param key\n     * @param value\n     */\n    remove(key: any, value?: any): T\n\n    /**\n     * 删除满足条件的数组元素\n     * @param cb \n     */\n    delete(cb: (value: T, index: number) => boolean): T[]\n\n    /**\n     * 返回一个随机元素\n     */\n    random(): T\n\n    /**\n     * 随机删除一个元素 并返还这个元素\n     */\n    randomRemove(): T\n\n    /**\n     * 是否有这个元素\n     */\n    has(key: any, value?: any): boolean\n\n    /**\n     * 添加一个元素并返回这个数组\n     */\n    append(val: T): T[]\n\n    /**\n     * 添加一个元素并返回这个元素\n     */\n    add(val: T): T\n\n    /**\n     * 返回最后一个元素\n     */\n    last(): T\n\n    /**\n     * 拼接数组 对象\n     */\n    join2(cb: (value: T, index: number) => string, separator?: string): string\n\n    /**\n     * push数组\n     */\n    pushArr(arr: T[]): number;\n\n    /**\n     * push没有的\n     * @param data \n     * @param key \n     * @param value \n     */\n    pushNoHas(data: T, key?: any, value?: any): boolean;\n\n    /**\n     * 重新设置这个数组\n     */\n    set(arr: T[]): T[]\n\n    /**\n     * 从后面查找index\n     * @param cb \n     */\n    findLastIndex(cb: (value: T, index: number) => boolean): number\n\n    /**\n     * 从后面查找\n     * @param cb \n     */\n    findLast(cb: (value: T, index: number) => boolean): T\n\n    unique(key?: string | Function | string[]): T[]\n}\n\ninterface String {\n    replaceAll(str: string, newStr: string): string\n}\n\n// promise\ninterface PromiseConstructor {\n    /**\n     * @param iterators \n     * @description 返回第一个成功的\n     */\n    any<T>(iterators: readonly (T | PromiseLike<T>)[]): Promise<T>;\n}\n\ninterface Promise {\n    finally\n}\n"]],0,0,[],[],[]]