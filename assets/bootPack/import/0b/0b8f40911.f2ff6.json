[1,["00Njf5iiVP34Ng44hfUHuX"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],2,11]],[[0,0,1,2,4],[1,0,1,2]],[[[[0,"FlashLight",[{"hash":3747953314,"record":null,"name":"FlashLight|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Light {\n  vec4 u_lrbt;\n  vec4 lightColor;\n  float lightAngle;\n  float lightWidth;\n  float time;\n  int rotated;\n};\nfloat linear(float x0, float x1, float y0, float y1, float inputX) {\n  return (y1 - y0) * (inputX - x0) / (x1 - x0) + y0;\n}\nvec4 addLightColor(vec4 textureColor) {\n  if (lightWidth <= 0.0) {\n    return textureColor;\n  }\n  float angleInRadians = radians(lightAngle);\n  vec2 lightCenterPoint = vec2(time, time);\n  vec2 uv;\n  if(rotated == 1) {\n    uv = vec2(\n      linear(u_lrbt[0], u_lrbt[1], 0.0, 1.0, v_uv0.y),\n      linear(u_lrbt[2], u_lrbt[3], 0.0, 1.0, v_uv0.x)\n    );\n    uv.y = 1.0 - uv.y;\n  }\n  else {\n    uv = vec2(\n      linear(u_lrbt[0], u_lrbt[1], 0.0, 1.0, v_uv0.x),\n      linear(u_lrbt[2], u_lrbt[3], 0.0, 1.0, v_uv0.y)\n    );\n  }\n  float dis = 0.0;\n  if (mod(lightAngle, 180.0) != 0.0) {\n    float lightOffsetX = lightCenterPoint.x - ((1.0 - lightCenterPoint.y) / tan(angleInRadians));\n    float tempy = (uv.y + lightWidth * 0.5) / (1.0 + lightWidth);\n    float dx = lightOffsetX + (1.0 - tempy) / tan(angleInRadians);\n    float tempx = (uv.x + lightWidth * 0.5) / (1.0 + lightWidth);\n    float offsetDis = abs(tempx - dx);\n    dis = sin(angleInRadians) * offsetDis;\n  } else {\n    float tempy = (uv.y + lightWidth * 0.5) / (1.0 + lightWidth);\n    dis = abs(tempy - lightCenterPoint.y);\n  }\n  float a = 1.0;\n  a *= step(0.01, textureColor.a);\n  float newLightWidth = lightWidth / (1.0 + lightWidth);\n  a *= step(dis, newLightWidth * 0.5);\n  a *= 1.0 - dis / (newLightWidth * 0.5);\n  vec4 finalLightColor = lightColor * a;\n  return textureColor + finalLightColor;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  gl_FragColor = addLightColor(gl_FragColor);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 u_lrbt;\nuniform vec4 lightColor;\nuniform float lightAngle;\nuniform float lightWidth;\nuniform float time;\nuniform int rotated;\nfloat linear(float x0, float x1, float y0, float y1, float inputX) {\n  return (y1 - y0) * (inputX - x0) / (x1 - x0) + y0;\n}\nvec4 addLightColor(vec4 textureColor) {\n  if (lightWidth <= 0.0) {\n    return textureColor;\n  }\n  float angleInRadians = radians(lightAngle);\n  vec2 lightCenterPoint = vec2(time, time);\n  vec2 uv;\n  if(rotated == 1) {\n    uv = vec2(\n      linear(u_lrbt[0], u_lrbt[1], 0.0, 1.0, v_uv0.y),\n      linear(u_lrbt[2], u_lrbt[3], 0.0, 1.0, v_uv0.x)\n    );\n    uv.y = 1.0 - uv.y;\n  }\n  else {\n    uv = vec2(\n      linear(u_lrbt[0], u_lrbt[1], 0.0, 1.0, v_uv0.x),\n      linear(u_lrbt[2], u_lrbt[3], 0.0, 1.0, v_uv0.y)\n    );\n  }\n  float dis = 0.0;\n  if (mod(lightAngle, 180.0) != 0.0) {\n    float lightOffsetX = lightCenterPoint.x - ((1.0 - lightCenterPoint.y) / tan(angleInRadians));\n    float tempy = (uv.y + lightWidth * 0.5) / (1.0 + lightWidth);\n    float dx = lightOffsetX + (1.0 - tempy) / tan(angleInRadians);\n    float tempx = (uv.x + lightWidth * 0.5) / (1.0 + lightWidth);\n    float offsetDis = abs(tempx - dx);\n    dis = sin(angleInRadians) * offsetDis;\n  } else {\n    float tempy = (uv.y + lightWidth * 0.5) / (1.0 + lightWidth);\n    dis = abs(tempy - lightCenterPoint.y);\n  }\n  float a = 1.0;\n  a *= step(0.01, textureColor.a);\n  float newLightWidth = lightWidth / (1.0 + lightWidth);\n  a *= step(dis, newLightWidth * 0.5);\n  a *= 1.0 - dis / (newLightWidth * 0.5);\n  vec4 finalLightColor = lightColor * a;\n  return textureColor + finalLightColor;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  gl_FragColor = addLightColor(gl_FragColor);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Light","binding":1,"members":[{"name":"u_lrbt","type":16,"count":1},{"name":"lightColor","type":16,"count":1},{"name":"lightAngle","type":13,"count":1},{"name":"lightWidth","type":13,"count":1},{"name":"time","type":13,"count":1},{"name":"rotated","type":5,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"FlashLight|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"lightColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color","tooltip":"光束颜色"}},"lightAngle":{"type":13,"value":[36],"editor":{"tooltip":"光束倾斜角度"}},"lightWidth":{"type":13,"value":[0.2],"editor":{"tooltip":"光束宽度"}}}}]}]]],0,0,[],[],[]],[[[1,"FlashLight",[{},"0",11,[{"defines":{"USE_TEXTURE":true}},"props",11,[{"lightWidth":0.1},"lightColor",8,[4,4294967295]]]]]],0,0,[0],[0],[0]]]]